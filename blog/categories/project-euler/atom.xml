<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: project euler | Scrappy Academy]]></title>
  <link href="http://ScrappyAcademy.github.com/blog/categories/project-euler/atom.xml" rel="self"/>
  <link href="http://ScrappyAcademy.github.com/"/>
  <updated>2013-02-16T10:05:31-05:00</updated>
  <id>http://ScrappyAcademy.github.com/</id>
  <author>
    <name><![CDATA[Scrappy Academy]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Palindrome Warm-Up]]></title>
    <link href="http://ScrappyAcademy.github.com/blog/2013/02/04/palindrome-warm-up/"/>
    <updated>2013-02-04T09:36:00-05:00</updated>
    <id>http://ScrappyAcademy.github.com/blog/2013/02/04/palindrome-warm-up</id>
    <content type="html"><![CDATA[<p>This week we continued our efforts at Project Euler tackling # 4, <a href="http://projecteuler.net/problem=4">Largest
Palindrome Product</a></p>

<blockquote><p>A palindromic number reads the same both ways. The largest palindrome made
from the product of two 2-digit numbers is 9009 = 91 99.</p>

<p>Find the largest palindrome made from the product of two 3-digit numbers.</p></blockquote>

<p>This week instead of diving into code head-on we discussed what the exact
problem was, <em>We wanted to find the largest palindrome for a product of numbers
from 100-999.</em></p>

<p>We then wrote up our thoughts into a format for the code we thought we should
be writing to solve the problem:</p>

<p><code>products(100..999).select(&amp;:is_palindrome?).max</code></p>

<p>Doing this allowed us to visualize a possible solution through code. It also
made obvious a few small problems we needed to solve before solving the main
question.</p>

<h2>Working with our code to find a solution:</h2>

<p><strong>1. Produce an array of products</strong></p>

<p>We looked through <a href="http://ruby-doc.org/core-1.9.3/Array.html">Ruby Doc</a> to find
the perfect method to call on an existing array to create a new array of
products.</p>

<p><a href="http://ruby-doc.org/core-1.9.3/Array.html#method-i-repeated_combination"><code>repeated_combination</code></a>
was exactly what we were looking for. This creates a new array of all the
combinations of elements in your existing array, without duplicates.</p>

<p>We then used the <code>map</code> method to generate the products of these new number
pairs.</p>

<p>Our Resulting Code:</p>

<p><code>ruby
def products(range)
  # Range can be an array or numbers or a Range. Either way calling `to_a`
  # ensures we have an array to work with
  range.to_a.repeated_combination(2).map{|nums| nums.reduce(:*)}
end
</code></p>

<p><strong>2. Evaluate products to see which products are palindromes</strong></p>

<p>This involved much discussion. At first we discussed manipulating the values
as an array.</p>

<p>What if we called <code>reverse</code> on the first three and last three indexes of the
array values and if they were equal we had our palindromes?</p>

<p>This could be a solution, but would result in a lot of labor intensive work by
the function to manipulate every value several times.</p>

<p>Will, a Scrappy member, brought up changing the array to a string. This way we
could just call <code>reverse</code> on all the strings. Then it is simply a matter of
checking if the string is the same forwards and backwards.</p>

<p>This seemed like the best idea. So we decided to delegate the <code>is_palindrome?</code>
logic to <code>String</code>:</p>

<p>```ruby
class Numeric
  def is_palindrome?</p>

<pre><code>to_s.is_palindrome?
</code></pre>

<p>  end
end
```</p>

<p><strong>3.  Define <code>is_palindrome</code></strong></p>

<p>This problem was pretty easily solved.</p>

<p>As we had already discussed figuring out what values were palindromes, we just
needed our strings before we could implement the function.</p>

<p>```ruby
class String
  def is_palindrome?</p>

<pre><code>self == reverse
</code></pre>

<p>  end
end
```</p>

<p><strong>4. Test our functions</strong></p>

<p>We had solved all our mini problems so now it was time to tackle the main
question:</p>

<blockquote><p>Find the largest palindrome made from the product of two 3-digit
numbers from 100-999.</p></blockquote>

<p>We tested our functions in IRB: <code>products(100...1000, 2).select{|n|
n.is_palindrome?}.max</code> sure enough returned the correct answer</p>

<p><strong>5. Correct our function to work with any number of arguments</strong></p>

<p>What excitement! We had collectively solved our weekly Project Euler problem,
but could we do more?</p>

<p>Yes! Our functions only returned the largest palindrome for a products of 2
numbers. What if we wanted to explore the largest palindrome for the product
of 3 numbers? No Problem!</p>

<p>To update our function we created a variable <code>n_elements</code> for the number of
arguments to be passed into the <code>repeated_combination</code> method in place of "2".</p>

<p>Defining a variable for the number of arguments allows you to customize the
numbers you're passing in to create a product.  Our new <code>products</code> function
looked like this:</p>

<p><code>ruby
def products(range, n_elements = 2)
  range.to_a.repeated_combination(n_elements).map{|nums| nums.reduce(:*)}
end
</code></p>

<p><strong>6. Wrapping Up</strong></p>

<p>So we had a solution. One thing that should be stated, was that we did monkey
patch Ruby core. There is a lot of discussion in the community about how this is
bad. In this case, we were willing to take the trade off with this simple patch
as it followed these rules:</p>

<ol>
<li>Is local only to our project</li>
<li>Is generic and can easily be re-used</li>
<li>Another implementation would probably not differ at all</li>
</ol>


<p>As always, Ruby is a language with lots of power. Use it responsibly.</p>

<h2>What else happened at Scrappy?</h2>

<p>After the warm-up we started exploring <a href="http://coffeescript.org/">Coffee
Script</a>.  The rest of our meetings this month will be
focusing on the Campfire chat client 'Hubot.'  Hubot uses Coffee Script to
interact with users and have some fun.</p>

<p><strong>What is Coffee Script?</strong></p>

<p>Coffee Script is a Ruby-like language that compiles to Javascript.</p>

<p><strong>Why would you use Coffee Script instead of good ole Javascript?</strong></p>

<p>There are several idioms specific to Javascript that can be overlooked after a
long day of coding in Rails. Coffee Script can make it easier to switch from
back end to front end work without overlooking some of those specific idioms.</p>

<p>Also, CoffeeScript is available by default in Rails. So it's just one of the
other technologies that are available for developer to learn.</p>

<p>We started exploring Hubot in campfire and even made our first update.  We
cloned the Hubot from Scrappy Academy's main repo directly onto our machine
from <a href="https://github.com/ScrappyAcademy/hubot">GitHub</a></p>

<p>Next we made a branch on the Scrappy Academy Hubot repo to match the issue we
wanted to solve, in this case we created the branch "Fix Cheer Me Up".</p>

<p>Our goal with "Fix Cheer Me Up" was to tell our Hubot to listen for the phrase
"cheer me up" and respond instead of having to ask our Hubot directly to "cheer
me up".</p>

<p>After cloning the repo onto our machine we opened up the <code>script</code>
file and then opened <code>cheer.coffee</code>.  We located "cheer me up" and
updated <code>robot.respond /cheer me up...</code> to <code>robot.hear /cheer me up...</code></p>

<p>Now we needed to update the main repo with the changes we made on our local
machine.</p>

<p>We went to GitHub and created a Pull Request to merge the updates from our "Fix
Cheer Me Up" branch to the Hubot "Master" branch.</p>

<p>We checked to make sure all systems were a go and then merged our updates onto
Master, success!</p>

<p>Now our hubot takes note anytime "cheer me up" is mentioned in converstaion on
our Campfire site instead of having to ask our hubot directly to cheer us up!</p>

<p>This week our goal is to tackle some of the issues with Hubot in the Scrappy
Academy repo.  What issues are you tackling this week on Hubot?</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fibonacci Warm-Up]]></title>
    <link href="http://ScrappyAcademy.github.com/blog/2013/01/28/fibonacci-warm-up/"/>
    <updated>2013-01-28T19:24:00-05:00</updated>
    <id>http://ScrappyAcademy.github.com/blog/2013/01/28/fibonacci-warm-up</id>
    <content type="html"><![CDATA[<p>Something we started doing just this week, and plan on continuing moving
forward, is tackling "warm-up" problems. This is reminiscent of high school math
class. These are relatively simple programming problems that are solved via
<em>pairing</em>.</p>

<p>This week, we solved via <em>group-pairing</em> is where the entire group participates
in solving the problem.  One person is designated as the <em>coder</em>. S/he displays
her/his laptop on the conference room TV (via an Apple TV). The group then
discusses the problem, and codes up a solution together.</p>

<p>Often this leads into side discussions about various programming techniques,
tips, tricks, etc. It's a good time for all. Everyone at different experience
levels walks away with something new.</p>

<p>Last week we started tackling <a href="http://projecteuler.net/">Project Euler</a>
problems. Up first was <a href="http://projecteuler.net/problem=2"><em>Even Fibonacci numbers</em></a>.
This appeared to be a relatively straight forward problem. The first solution
that was attempted looked a bit like:</p>

<p>```ruby
a = 1
b = 1
sum = 0
while b &lt; 4_000_000
  a = b
  b = a + b
  if b.even?</p>

<pre><code>sum = sum + b
</code></pre>

<p>  end
end
puts sum
```</p>

<p>However, this produced an incorrect result. Upon further investigation, the bug
was in lines 5 and 6. Due to the order of the statements the value of <code>a</code> gets
overwritten, before it can be added to <code>b</code>. The evaluation looks a bit like
this:</p>

<p><code>ruby
a = 1; b = 1    # Before loop
a = 1; b = 2    # 1st pass
a = 2; b = 4    # 2nd pass
a = 4; b = 8    # 3rd pass
</code></p>

<p>So to fix this, the group replaced those two lines of code with:</p>

<p><code>
tmp = b
b = a + b
a = tmp
</code></p>

<p>Now when things get evaluated, it looks like:</p>

<p><code>ruby
a = 1; b = 1; tmp = nil    # Before loop
a = 1; b = 2; tmp = 1      # 1st pass
a = 2; b = 3; tmp = 2      # 2nd pass
a = 3; b = 5; tmp = 3      # 3rd pass
</code></p>

<p>This led into a side discussion about some Ruby idioms. Namely, multiple
assignment. We were able to replace these three lines of code with one:</p>

<p><code>ruby
a, b = b, a+b
</code></p>

<p>This will do exactly as you expect. It helps to understand what Ruby is doing
behind the scenes. In essence, it's evaluating and storing the right-hand-side
(<em>rhs</em> as it is commonly seen in error messages). Then it uses the <code>splat</code> to
dereference the values and assign them in turn. Think of it as:</p>

<p><code>ruby
tmp = [b, a+b]
a, b = *tmp
</code></p>

<p>Additionally, we talked about the <code>if</code> and <code>unless</code> one-liners. These are great
ways to shorten up the code. Our final solution, took the form:</p>

<p><code>ruby
a = b = 1
sum = 0
while b &lt; 4_000_000
  a, b = b, a+b
  sum += b if b.even?
end
puts sum
</code></p>

<p>While this is a good solution. It wasn't very re-useable. So to make it more
re-useable we wrapped it in a method:</p>

<p>```ruby
def even_fibonnaci_sum(upper_limit)
  a = b = 1
  sum = 0
  while b &lt; upper_limit</p>

<pre><code>a, b = b, a+b
sum += b if b.even?
</code></pre>

<p>  end
  sum
end
```</p>

<p><span class='pullquote-right' data-pullquote='So at this point we took
a step back, and asked: &#8220;What is the code that we wish we could write?&#8221;'>
That's great. Now we can re-use it anywhere, and we are no longer locked into a
<code>4_000_000</code> cap. However, the
<a href="http://en.wikipedia.org/wiki/Fibonacci_number">Fibonnaci</a> sequence is very
common. And this method doesn't let us re-use that. So at this point we took
a step back, and asked: "What is the code that we wish we could write?" The
answer looked something like:
</span></p>

<p><code>ruby
Fibonnaci.upto(4_000_000).select(&amp;:even?).sum
</code></p>

<p>A nice little one-liner. And it's very clear what we are doing. In English,
this would read: <em>"For Fibonnaci numbers up to 4,000,000. Take the even numbers
and sum them."</em></p>

<p>Sadly, there is no Fibonnaci number generator, but we can
<a href="http://www.dev.gd/20130114-building-sequences-with-enumerator.html">build sequences</a>.
In fact the Ruby docs show an example of how to create one
<a href="http://ruby-doc.org/core-1.9.3/Enumerator.html#method-c-new">Fibonacci Generator</a>.</p>

<p>So we coded one up:</p>

<p>```ruby
def Fibonnaci
  Enumerator.new do |y|</p>

<pre><code>a = b = 1
loop do
  y &lt;&lt; a
  a, b = b, a + b
end
</code></pre>

<p>  end
end
```</p>

<p>Great! We have an <a href="http://ruby-doc.org/core-1.9.3/Enumerator.html"><code>Enumerator</code></a>,
but there's no <code>upto</code>. So we created one:</p>

<p>```ruby
module Sequentially
  def upto(limit, &amp;block)</p>

<pre><code>enum = Enumerator.new do |y|
  each do |num|
    break unless num &lt; limit
    y &lt;&lt; num
  end
end

block ? enum.each(&amp;block) : enum
</code></pre>

<p>  end
end
```</p>

<p>And updated the Fibonnaci generator accordingly:</p>

<p>```ruby
def Fibonnaci
  Enumerator.new{ |y|</p>

<pre><code># see above for meat
</code></pre>

<p>  }.extend Sequentially
end
```</p>

<p>Sweet! <code>select</code> will work just fine. However, <code>sum</code> doesn't exist (at least not
outside Rails). So, let's patch that in.</p>

<p>```ruby
module Enumerable
  def sum</p>

<pre><code>reduce(:+)
</code></pre>

<p>  end
end
```</p>

<p>So this final solution is <strong><em>a lot longer</em></strong>. However, it is composed of very
re-usable parts that we can continue to use for more
<a href="http://projecteuler.net/">Project Euler</a> puzzles. Put that all together and
you have the elegant solution:</p>

<p>```ruby
module Enumerable
  def sum</p>

<pre><code>reduce(:+)
</code></pre>

<p>  end
end</p>

<p>module Sequentially
  def upto(limit, &amp;block)</p>

<pre><code>enum = Enumerator.new do |y|
  each do |num|
    break unless num &lt; limit
    y &lt;&lt; num
  end
end

block ? enum.each(&amp;block) : enum
</code></pre>

<p>  end
end</p>

<p>def Fibonnaci
  Enumerator.new{ |y|</p>

<pre><code>a = b = 1
loop do
  y &lt;&lt; a
  a, b = b, a + b
end
</code></pre>

<p>  }.extend Sequentially
end</p>

<p>Fibonnaci.upto(4_000_000).select(&amp;:even?).sum
```</p>
]]></content>
  </entry>
  
</feed>
